# +
# -*- coding: utf-8 -*-
# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# pytx documentation build configuration file, created by
# Author:MengXuan Chen
# date:2024.3.28
# Institute:JSPI



import sys
import os
sys.path.append(r"C:\Users\DELL\机器学习")
#import d2l
import time
import re
import urllib
import requests
import numpy as np
import pandas as pd
import subprocess
import zipfile
import shutil


# -

#将安卓软件包中的Davlik文件反编译为jar包
class DexToJarModule():
    def __init__(self,source,target=None,is_one_file=True,**kwargs):
        self.s=source #源安卓软件包路径
        self.d=target #反编译后的jar包路径
        self.oneflag=is_one_file #判断是否是一个安卓软件包
    
    #检查文件后缀名
    def __check_extension(self):
        flag=True
        if self.oneflag:
            source=[self.s]
        else:
            source=self.s
        for path in source:
            if os.path.splitext(path)[1]!=".apk":
                flag=False
        return flag
    
    #检查源路径与目的路径数量是否一致
    def __CheckNum(self):
        if len(self.s)!=len(self.d):
            return False
        return True
    
    #当所解压的安卓文件数量为1个时的调用函数
    def __dex2jarOneFile(self):
        if self.__check_extension():
            command="d2j-dex2jar {} /o {}".format(self.s,self.d) #执行系统命令
            try:
                system_response=os.system(command)
                assert system_response==0
                os.system("taskkill /f /im cmd.exe")
                print("decompile successfully")
            except AssertionError:
                print("decompile unsuccessfully!")
        else:
            print("This is not avalid apk file")
      
    #当所解压的安卓文件数量为多个时的调用函数
    def __dex2jarFileList(self):
        if self.__check_extension() and self.__CheckNum():
            for inputfile,outputfile in zip(self.s,self.d):
                command="d2j-dex2jar {} -o {}".format(inputfile,outputfile)
                try:
                    system_response=os.system(command)
                    assert system_response==0
                    #print(system_response)
                    print("decompile successfully!")
                except AssertionError:
                    print ("decompile unsuccessfully!")
        else:
            print ("The file is not an apk file!")
    os.system("taskkill /f /im cmd.exe")
    
    #类的主调用函数
    def run(self):
        if self.oneflag:
            self.__dex2jarOneFile()
        else:
            self.__dex2jarFileList()


filemodule=DexToJarModule([r"D:\Downloads\APK分析工具\7.案例\样本1.apk",r"D:\Downloads\APK分析工具\7.案例\样本2.apk"],[r'./apk1.jar',r'./apk2.jar'],is_one_file=False)
filemodule.run()


#jar压缩包解压模块
class ExtractJarModule():
    def __init__(self,source,target):
        self.s=source  #源jar包路径
        self.t=target  #解压后的文件夹的当前路径
        
    #解压过程关键函数
    def Decompress_path(self):
        for idx,path_each in enumerate(self.s):
            if path_each.endswith('.jar'):
                print("正在解压：%s" % path_each)
                zip_file = zipfile.ZipFile(path_each, 'r')  # 压缩文件位置
                for idx2,file in enumerate(zip_file.namelist()):
                    if os.path.exists(self.t[idx]) and idx2==0:
                        print("'%s'" % self.t[idx], "已存在，新文件名为'%s'" % (self.t[idx] + "1"))
                        zip_file.extract(file, self.t[idx] + "1")  # 解压位置,encode('utf-8')
                    else:
                        zip_file.extract(file,self.t[idx])  # 解压位置
                zip_file.close()
            else:
                print(path_each, "非jar文件，不进行解压！")
                continue
    
    def run(self):
        self.Decompress_path()


model=ExtractJarModule(['apk1.jar','apk2.jar'],['apkm','apkn'])
model.run()


#.class后缀名的文件批量反编译为.java为后缀名的文件
class DecompileModule():
    def __init__(self,source_dir,target_dir):
        self.s_dir=source_dir  #初始文件夹目录
        self.t_dir=target_dir  #反编译后文件夹目录
        
    def MainActivity(self):
        for s,t in zip(self.s_dir,self.t_dir):
            command="jad -o -r -s java -d {} {}/**/*.class".format(t,s) #使用jad.exe进行批量反编译
            try:
                system_response=os.system(command)
                assert system_response==0
                os.system("taskkill /f /im cmd.exe")
                print("decompile successfully")
            except AssertionError:
                print("decompile unsuccessfully!")
            
    def forward(self):
        self.MainActivity()


md=DecompileModule(['apkm'],['cmx2'])
md.forward()


