from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
import numpy as np


class DecisionTreeClassifierWithVisualization:
    def __init__(self):
        self.clf = DecisionTreeClassifier()

    def train(self, X_train, y_train):
        self.clf.fit(X_train, y_train)

    def test(self, X_test):
        return self.clf.predict(X_test)

    def score(self):
        accuracy = accuracy_score(y_test, y_pred)
        print(f'准确率：{accuracy}')

    def visualize_decision_boundary(self, X, y):
        h = 0.02  # 网格步长
        x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
        y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
        xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
        Z = self.clf.predict(np.c_[xx.ravel(), yy.ravel()])
        Z = Z.reshape(xx.shape)

        plt.figure(figsize=(8, 6))
        plt.contourf(xx, yy, Z, cmap=plt.cm.Paired, alpha=0.8)
        plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Paired)
        plt.xlabel(iris.feature_names[0])
        plt.ylabel(iris.feature_names[1])
        plt.show()


# 加载鸢尾花数据集
iris = load_iris()
X = iris.data[:, :2]  # 只使用前两个特征进行可视化
y = iris.target

# 划分数据集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 创建决策树分类器对象
dt_classifier = DecisionTreeClassifierWithVisualization()

# 训练决策树分类器
dt_classifier.train(X_train, y_train)

# 测试分类器
y_pred = dt_classifier.test(X_test)

# 计算准确率
accuracy = accuracy_score(y_test, y_pred)
print(f'准确率：{accuracy}')

# 可视化决策边界
dt_classifier.visualize_decision_boundary(X, y)


