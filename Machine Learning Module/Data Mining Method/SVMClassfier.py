import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import sklearn
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# +
class SVM():
    def __init__(self,X_train,Y_train,X_test,Y_test,is_init=True,parameters=None):
        self.X=X_train
        self.Y=Y_train
        self.X_t,self.Y_t=X_test,Y_test
        self.model=None
        self.is_init=is_init
        self.parameters=parameters
        
    def model_init(self,X_data,Y_data):
        if self.parameters is None:
            self.parameters={'kernel':['linear','rbf','sigmoid','poly'],'C':np.linspace(0.5,1.5,2),'gamma':np.linspace(0.5,1.5,2)}
        svc = SVC()
        model = GridSearchCV(svc,self.parameters,cv=5,scoring='accuracy')
        model.fit(X_data,Y_data)
        return model.best_params_

    def init_data(self,data):
        stdScaler = StandardScaler().fit(self.X) 
        trainStd = stdScaler.transform(data)
        return trainStd
    
    def forward(self):
        train_X,train_Y=self.init_data(self.X),self.Y
        if self.is_init:
            best_params=self.model_init(train_X,train_Y)
            model=SVC(**best_params)
        else:
            model=SVC()
        self.model=model.fit(train_X,train_Y)
        return model.score(train_X,train_Y)
    
    def validate(self):
        Validate_X,Validate_Y=self.init_data(self.X_t),self.Y_t
        return self.model.score(Validate_X,Validate_Y)
    
    def predict(self,X):
        X_predict=self.init_data(X)
        return self.model.predict(X_predict)

    def arg_plot(self,kernel,kind,arg):
        train_X, train_Y = self.init_data(self.X), self.Y
        test_X,test_Y=self.init_data(self.X_t), self.Y_t
        for item in kernel:
            accuracy,param_dict=[],{}
            for num in arg:
                param_dict[kind]=num
                model=SVC(kernel=item,**param_dict)
                model.fit(train_X,train_Y)
                accuracy.append(model.score(test_X,test_Y))
            plt.plot(arg,accuracy)
        plt.legend(kernel)
        plt.show()

class PCASVM(SVM):
    def __init__(self,X_train,Y_train,X_test,Y_test,ComposeNum,is_init=True,parameters=None):
        super().__init__(X_train,Y_train,X_test,Y_test)
        self.num=ComposeNum
        self.dim=X_train.shape[-1]
        self.pca=None
        self.is_init=is_init
        self.parameters=parameters
        
    def PCATransform(self):
        train_X=self.init_data(self.X)
        pca = PCA(n_components=self.num).fit(train_X)
        return pca


    def forward(self):
        self.pca=self.PCATransform()
        train_X,train_Y=self.DataTransform(self.X),self.Y
        if self.is_init:
            best_params=self.model_init(train_X,train_Y)
            model=SVC(**best_params)
        else:
            model=SVC()
        self.model=model.fit(train_X,train_Y)
        return model.score(train_X,train_Y)
    
    def DataTransform(self,X):
        train_X_temp=self.init_data(X)
        train_X=self.pca.transform(train_X_temp)
        return train_X


    def validate(self):
        Validate_X,Validate_Y=self.DataTransform(self.X_t),self.Y_t
        return self.model.score(Validate_X,Validate_Y)


    def predict(self,X):
        X_predict=self.DataTransform(X)
        return self.model.predict(X_predict)


    def arg_plot(self,kernel,kind,arg):
        train_X, train_Y = self.DataTransform(self.X), self.Y
        test_X,test_Y=self.init_data(self.X_t), self.Y_t
        for item in kernel:
            accuracy,param_dict=[],{}
            for num in arg:
                param_dict[kind]=num
                model=SVC(kernel=item,**param_dict)
                model.fit(train_X,train_Y)
                accuracy.append(model.score(test_X,test_Y))
            plt.plot(arg,accuracy)
        plt.legend(kernel)
        plt.show()
        
    def compoment_draw(self,min_dim=2,max_dim=None,is_init=None):
        if max_dim==None:
            max_dim=self.dim+1
        if is_init==None:
            is_init=self.is_init
        train_X_temp=self.init_data(self.X)
        test_X_temp=self.init_data(self.X_t)
        accuracy=[]
        for n_dim in range(min_dim,max_dim):
            pca=PCA(n_components=n_dim).fit(train_X_temp)
            train_X,train_Y=pca.transform(train_X_temp),self.Y
            test_X,test_Y=pca.transform(test_X_temp),self.Y_t
            if is_init:
                best_params=self.model_init(train_X,train_Y)
                model=SVC(**best_params)
            else:
                model=SVC()
            model.fit(train_X,train_Y)
            accuracy.append(model.score(test_X,test_Y))
        plt.plot(list(range(min_dim,max_dim)),accuracy)
        plt.show()
# -

dataset = pd.read_csv(r"./final_opcodes_finaldataset.csv").values
X ,Y= dataset[:,1:],dataset[:,0]
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)
#print(X,Y)
model=PCASVM(X_train,y_train,X_test,y_test,20,is_init=False)
print(model.forward())
#model.arg_plot(['linear','rbf','sigmoid','poly'],'C',np.linspace(0.1,10,100))
#print(model.predict(X))
model.compoment_draw()

model.validate()


